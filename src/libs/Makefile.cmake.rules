ifndef GW_SRC_DIR
GW_PROJECT_ROOT ?= $(shell for a in 1 2 3 4 5 6 7 8; do file="$${b}Makefile.project_config"; if [ -f $${b}Makefile.project_config ]; then cd $${b}.; pwd; break; fi; b="../$$b"; done)
include $(GW_PROJECT_ROOT)/Makefile.project_config
endif

# Input parameters
#
# GW_PKG          - Name of the package. Used as default value for other optional vars
# GW_PKG_ZIP_BASE - [ DEFAULT: Not set ] 
#                     If set, indicates that the library is a downloaded zip-file to be used
#                     Otherwise its assumed the library is local version controlled unpacked source
# GW_PKG_SRC_DIR  - [ DEFAULT: $(GW_PKG) ] 
#                     If source is zipped: Forces the name of the unpacked source directory
#                     Otherwise:           Specifies where the local source resides
# GW_COMPILE_DATE_FILE - [ DEFAULT: Note set ]
#                     If set, the file is generated before each build and export. The resulint file should not be 
#                     version controlled. 
# GW_COMPILE_DATE_INCLUDE_PATH - [ DEFAULT: Note set ]
#                     If set, the path is prefixed in compile-date.cpp's include line.

GW_CURRENT_DIR:=$(shell pwd)
GW_PKG_SRC_DIR     ?=$(GW_PKG)
GW_PKG_SRC_SUB_DIR ?=$(shell pwd)/$(GW_PKG_SRC_DIR)

GW_CMAKE_FLAGS+= -DCMAKE_INSTALL_PREFIX=$(GW_STAGE_DIR) -DCMAKE_PREFIX_PATH=$(GW_STAGE_DIR) -DCMAKE_BUILD_TYPE=$(GW_BUILD_TYPE)

GW_PKG_OUTPUT_DIR ?= build/$(GW_PLATFORM)-$(GW_BUILD_TYPE)
GW_PATCH_DIR := patches/$(GW_PKG_SRC_DIR)


# For cmakes FindPkgConfig module
# On one hand one can say that CMake peoject should be able to find what they need using just the CMAKE_PREFIX_PATH
# In practice that is a pain in the CMakeLists.txt. We therefore demand that pkg-config is "set up" through env. vars to find the packages.
export PKG_CONFIG_PATH:=$(PKG_CONFIG_PATH):$(GW_STAGE_DIR)/lib/pkg-config/


#Unpack
.PHONY: clean-cmake-unpacked
clean-cmake-unpacked:

ifdef GW_PKG_ZIP_BASE

build/%.unpacked : %.tgz
	@rm -rf tmp_unpack
	@mkdir tmp_unpack
	@tar xzf $< -C tmp_unpack
	@mv tmp_unpack/* $(GW_PKG_SRC_DIR)
	@rm -rf tmp_unpack
	@mkdir -p build
	@touch $@

build/%.unpacked : %.tar.gz
	@rm -rf tmp_unpack
	@mkdir tmp_unpack
	@tar xzf $< -C tmp_unpack
	@mv tmp_unpack/* $(GW_PKG_SRC_DIR)
	@rm -rf tmp_unpack
	@mkdir -p build
	@touch $@

$(GW_PKG_SRC_DIR)/CMakeLists.txt : build/$(GW_PKG_ZIP_BASE).unpacked

unpack: build/$(GW_PKG_ZIP_BASE).unpacked

clean-cmake-unpacked:
	@rm -rf $(GW_PKG_SRC_DIR) || true

endif  #GW_PKG_ZIP_BASE



ifdef GW_COMPILE_DATE_FILE
.PHONY: compile-date
compile-date: $(GW_PKG_SRC_DIR)/CMakeLists.txt
	update-compile-date.sh $(GW_COMPILE_DATE_FILE) $(GW_PKG) $(GW_COMPILE_DATE_INCLUDE_PATH)

$(GW_PKG_OUTPUT_DIR)/Makefile : compile-date
export: compile-date
endif


# ---------- Patching - including compile-date if used ----------
GW_PATCH_FILES:=$(shell [ -d $(GW_PATCH_DIR)/ ] && find $(GW_PATCH_DIR)/* -type f )
# Skall köras innan configure, build och export. Alltid om compile-date-patchningendast om patchar updaterats för att inte trigga onödiga buids.
build/$(GW_PKG).patched : $(GW_PKG_SRC_DIR)/CMakeLists.txt $(GW_PATCH_FILES)
	@mkdir -p build
	@if [ -d $(GW_PATCH_DIR) ]; then cp -fa $(GW_PATCH_DIR) .; fi
	@touch $@
	@echo Patched OK!
	

# ---------- Configure ----------
$(GW_PKG_OUTPUT_DIR)/Makefile: build/$(GW_PKG).patched
	@mkdir -p $(GW_STAGE_DIR)
	@mkdir -p $(GW_PKG_OUTPUT_DIR)
	cd $(GW_PKG_OUTPUT_DIR) && cmake $(GW_CMAKE_FLAGS) $(GW_CURRENT_DIR)/$(GW_PKG_SRC_SUB_DIR)

# ---------- Build ----------
build: $(GW_PKG_OUTPUT_DIR)/Makefile
	@make -s $(GW_PARALELL_MAKE_FLAG) -C $(dir $<)
ifdef VERBOSE
	@make $(GW_PARALELL_MAKE_FLAG) -C $(dir $<) install
else
	@make -s $(GW_PARALELL_MAKE_FLAG) -C $(dir $<) install > /dev/null 
endif


.PHONY: export
export: build/$(GW_PKG).patched unpack
	@mkdir -p $(GW_EXPORT_DIR)
	@tar czf $(GW_EXPORT_DIR)/$(GW_PKG)-export-$(GW_CURR_DATE).tar.gz $(GW_PKG_SRC_DIR)
	@echo "Created: $(GW_EXPORT_DIR)/$(GW_PKG)-export-$(GW_CURR_DATE).tar.gz"

clean-cmake: clean-cmake-unpacked
	@rm -rf build
	@rm -rf tmp_unpack
	@rm -rf $(GW_EXPORT_DIR)

clean: clean-cmake

